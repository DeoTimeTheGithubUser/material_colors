use std::ops::Deref;

use crate::color::Color;

pub trait Hue: Deref<Target = Color> + private::Sealed {
    const S50: Color;
    const S100: Color;
    const S200: Color;
    const S300: Color;
    const S400: Color;
    const S500: Color;
    const S600: Color;
    const S700: Color;
    const S800: Color;
    const S900: Color;

    const A100: Color;
    const A200: Color;
    const A400: Color;
    const A700: Color;
}

// Includes hues generated by build script
include!(concat!(env!("OUT_DIR"), "/", env!("GENERATED_HUES")));

impl<T: Hue> From<T> for Color {
    fn from(value: T) -> Self {
        *value
    }
}

mod private {
    pub trait Sealed {}
}
